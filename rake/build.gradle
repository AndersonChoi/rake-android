import org.slf4j.Logger
import org.slf4j.LoggerFactory

import java.util.regex.Pattern

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'idea'

version = '0.4.0-SNAPSHOT'
group = 'com.skplanet.rake'
archivesBaseName = 'rake-android'

/* constant */
def currentProjectDir = "${rootProject.projectDir}/rake"
def tempJar = "${archivesBaseName}-${version}-withoutShuttle.jar"
def completeJar = "${archivesBaseName}-${version}.jar"
def docsDir = "${rootProject.projectDir}/docs/"
def currentVersionDocsDir = (version.contains("SNAPSHOT")) ? "SNAPSHOT" : version
def releaseDir = "${rootProject.projectDir}/release"
def releaseJarDir = "$releaseDir/jar"
String DIR_AAR = "$currentProjectDir/build/outputs/aar"
String DEBUG_AAR = "rake-debug.aar"
String PATH_DEBUG_AAR = "$DIR_AAR/$DEBUG_AAR"
String DIR_TEST_APP_LIBS = "${rootProject.projectDir}/testApp/libs"
def includedDir = "${currentProjectDir}/libs/included";
def branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
def logger = { String message -> println("[RAKE BUILDER] $message") }
def updateFile = { String path, Pattern regex, String replace ->
    def encoding = "UTF-8"
    def f = new File(path)

    String content = f.getText(encoding)
    def old = content.find(regex)
    content = content.replaceAll(regex, replace)

    assert(content.find(regex) == replace)
    f.write(content, encoding)

    logger "Replaced: $old -> $replace ($path)"
}

/**
 * 빌드타임에 변수 또는 상수가 치환(replace) 되는 파일들
 */
String RAKE_ROOT_PACKAGE = "src/main/java/com/rake/android/rkmetrics";
String FILE_REPLACED_CONFIG = "${currentProjectDir}/$RAKE_ROOT_PACKAGE/config/RakeConfig.java"
String FILE_REPLACED_METRIC_LOGGER = "${currentProjectDir}/$RAKE_ROOT_PACKAGE/metric/MetricLogger.java"

String VAR_BRANCH = "BRANCH";
Pattern REGEX_BRANCH = ~/String $VAR_BRANCH = "(.)*"/
String FILLED_BRANCH = "String $VAR_BRANCH = \"$branchName\""

String VAR_METRIC_TOKEN = "METRIC_TOKEN";
Pattern REGEX_METRIC_TOKEN_FILLED = ~/String $VAR_METRIC_TOKEN = "(.)*"/
String EMPTY_METRIC_TOKEN = "String $VAR_METRIC_TOKEN = \"\""

/**
 * 빌드스크립트 시작
 */

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

dependencies {
    // provided fileTree(dir: 'libs/provided', include ['*.jar'])
    compile fileTree(dir: 'libs/included', include: ['*.jar'])

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.1'
    testCompile 'org.apache.httpcomponents:httpclient:4.4.1'
    testCompile 'com.github.tomakehurst:wiremock:1.55'
    testCompile 'ch.qos.logback:logback-core:1.1.3'
    testCompile 'ch.qos.logback:logback-classic:1.1.3'
    testCompile "org.robolectric:robolectric:3.0"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://mvn.skplanet.com/content/repositories/releases')
            snapshotRepository(url: 'http://mvn.skplanet.com/content/repositories/snapshots')
        }
    }
}

def updateVersionInConfigFile = {

    String v = version.tokenize('-')[0]
    Pattern pattern = ~/"r0.5.0_c(.)*"/
    String  replace = "\"r0.5.0_c${v}\""
    String  path = FILE_REPLACED_CONFIG

    updateFile(path, pattern, replace)
}

def getMetricToken = {
    /**
     * 아래의 환경변수 및 상수 이름들은 MetricLoggerTokenSpec.java 에 있는 이름과 동일해야 함
     */
    String ENV_METRIC_TOKEN_LIVE = "METRIC_TOKEN_LIVE";
    String ENV_METRIC_TOKEN_DEV = "METRIC_TOKEN_DEV";
    String releaseBranch = "release"

    /* 환경변수 검증 */
    String METRIC_TOKEN_LIVE = System.getenv(ENV_METRIC_TOKEN_LIVE)
    String METRIC_TOKEN_DEV  = System.getenv(ENV_METRIC_TOKEN_DEV)

    if (null == METRIC_TOKEN_LIVE) throw new IllegalArgumentException("Env $ENV_METRIC_TOKEN_LIVE required");
    if (null == METRIC_TOKEN_DEV)  throw new IllegalArgumentException("Env $ENV_METRIC_TOKEN_DEV required");

    /* 토큰값 설정 */
    String METRIC_TOKEN = null;

    if (releaseBranch.equals(branchName)) METRIC_TOKEN = METRIC_TOKEN_LIVE
    else METRIC_TOKEN = METRIC_TOKEN_DEV

    return METRIC_TOKEN
}

def getFilledMetricToken = {
    String METRIC_TOKEN = getMetricToken()

    String FILLED_METRIC_TOKEN = "String $VAR_METRIC_TOKEN = \"$METRIC_TOKEN\""

    return FILLED_METRIC_TOKEN
}

def fillMetricToken =  {

    String FILLED_METRIC_TOKEN = getFilledMetricToken()
    /**
     * 소스 코드에 토큰을 노출하지 않기 위해서 TOKEN 값을 빌드타임에 환경변수에서 읽어와 덮어쓴다.
     * `build.gradle` 과 `MetricLoggerTokenSpec.java` 를 참조할 것
     *
     * 후에 `release` 브랜치에서 LIVE TOKEN 이 기록되었는지 크로스 체크를 위해
     * BRANCH 값을 이용한다.
     */

    updateFile(FILE_REPLACED_METRIC_LOGGER, REGEX_BRANCH, FILLED_BRANCH) /* BRANCH 업데이트 */
    updateFile(FILE_REPLACED_METRIC_LOGGER, REGEX_METRIC_TOKEN_FILLED, FILLED_METRIC_TOKEN) /* METRIC_TOKEN 업데이트 */
}

gradle.projectsEvaluated { /* update version before compiling */



    /**
     * build.gradle 에 있는 버전을 이용해, RakeConfig.java 파일 내에 있는 버전을 매 빌드마다 변경
     */
    updateVersionInConfigFile();

    /**
     * 환경변수 값을 이용해 MetricLogger.java 에 있는 Rake Client Metric 용 토큰을 빌드타임에 컴파일
     * 자세한 내용은 MetricLogger.java, MetricLoggerTokenSpec.java 를 참조
     */

    fillMetricToken();
}


task createJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${docsDir}/$currentVersionDocsDir")
    failOnError false
}

tasks.build.doLast {

/* extract jar from AAR and create rake.jar without shuttle */
    task extractJarFromAar(type: Copy) {

        logger "Extracting ${tempJar} from ${PATH_DEBUG_AAR}"

        from zipTree(file(PATH_DEBUG_AAR))
        into DIR_AAR
        rename "classes.jar", tempJar
        exclude "R.txt", "assets", "aidl", "aapt/**/*", "res/**/*", "AndroidManifest.xml",
                "libs/**/*"
        includeEmptyDirs = false
    }

/* zip rake-android.jar with shuttle.jar */
    task zipWithShuttle(type: Zip) {

        /* constants */
        String shuttleJarNamePrefix = "rakemetricSentinelShuttle"
        def shuttleJarNames = []

        /* logic */
        new File("${includedDir}").eachFile { file ->
            if (file.path.contains(shuttleJarNamePrefix))
                shuttleJarNames << file.path
        }

        if (shuttleJarNames.size > 1)
            throw new IllegalStateException("Multiple shuttle jar exists in ${includedDir}")
        else if (shuttleJarNames.size == 0)
            throw new IllegalStateException("Can not find shuttle jar in ${includedDir}")

        String shuttleJarName = shuttleJarNames[0]
        logger "Provided shuttle: ${shuttleJarName}"

        // merge crash-logger.jar with shuttle.jar
        from zipTree(file("${shuttleJarName}"))
        from zipTree(file("${DIR_AAR}/${tempJar}"))
        exclude ".gitkeep", "META-INF/", "${shuttleJarNamePrefix}.java"
        include "**/*"
        extension "jar"
        destinationDir file("${DIR_AAR}")
    }

    task copyCompleteJarToTestApp(type: Copy) {

        logger "Copying $DIR_AAR/$completeJar to ${DIR_TEST_APP_LIBS}/"

        from DIR_AAR
        include completeJar
        into DIR_TEST_APP_LIBS
    }

    task copyCompleteJarToReleaseDir(type: Copy) {

        logger "Copying $DIR_AAR/$completeJar to ${releaseJarDir}/"

        from DIR_AAR
        include completeJar
        into releaseJarDir
    }

    task initializeMetricToken(type: Copy) {
        logger "Initializing METRIC_TOKEN"
        updateFile(FILE_REPLACED_METRIC_LOGGER, REGEX_METRIC_TOKEN_FILLED, EMPTY_METRIC_TOKEN)
    }

    extractJarFromAar.execute();
    zipWithShuttle.execute();
    copyCompleteJarToTestApp.execute();

    if (branchName.startsWith("release")) {
        createJavadoc.execute()
        copyCompleteJarToReleaseDir.execute();
    }

    initializeMetricToken.execute();
}

