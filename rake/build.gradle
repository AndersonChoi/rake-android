import org.slf4j.Logger
import org.slf4j.LoggerFactory

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'idea'

version = '0.4.0-SNAPSHOT'
group = 'com.skplanet.rake'
archivesBaseName = 'rake-android'

/* constant */
def currentProjectDir = "${rootProject.projectDir}/rake"
def tempJar = "${archivesBaseName}-${version}-withoutShuttle.jar"
def completeJar = "${archivesBaseName}-${version}.jar"
def docsDir = "${rootProject.projectDir}/docs/"
def currentVersionDocsDir = (version.contains("SNAPSHOT")) ? "SNAPSHOT" : version
def releaseDir = "${rootProject.projectDir}/release"
def releaseJarDir = "$releaseDir/jar"
def aarDir = "$currentProjectDir/build/outputs/aar"
def debugAAR = "rake-debug.aar"
def debugAARPath = "$aarDir/$debugAAR"
def testAppLibDir = "${rootProject.projectDir}/testApp/libs"
def includedDir = "${currentProjectDir}/libs/included";
def branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
def logger = { String message -> println("[RAKE BUILDER] $message") }



android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

dependencies {
    // provided fileTree(dir: 'libs/provided', include ['*.jar'])
    compile fileTree(dir: 'libs/included', include: ['*.jar'])

    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.httpcomponents:httpclient:4.4.1'
    testCompile 'com.github.tomakehurst:wiremock:1.55'
    testCompile 'ch.qos.logback:logback-core:1.1.3'
    testCompile 'ch.qos.logback:logback-classic:1.1.3'
    testCompile "org.robolectric:robolectric:3.0"
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://mvn.skplanet.com/content/repositories/releases')
            snapshotRepository(url: 'http://mvn.skplanet.com/content/repositories/snapshots')
        }
    }
}

gradle.projectsEvaluated { /* update version before compiling */
    def updateFile = { String path, String pattern, String replace ->
        def encoding = "UTF-8"
        def regex = ~/$pattern/
        def f = new File(path)

        String content = f.getText(encoding)
        def old = content.find(regex)
        content = content.replaceAll(regex, replace)

        assert(content.find(regex) == replace)
        f.write(content, encoding)

        logger "version $old in RakeAPI.java was replaced with $replace"
    }

    if (branchName.startsWith("release")) {

        String v = version.tokenize('-')[0]
        def pattern = "\"r0.5.0_c(.)*\""
        def replace = "\"r0.5.0_c${v}\""
        def path = ("${currentProjectDir}/src/main/java/com/rake/android/rkmetrics/config/RakeConfig.java")

        updateFile(path, pattern, replace)
    }
}

task createJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("${docsDir}/$currentVersionDocsDir")
    failOnError false
}

tasks.build.doLast {

    extractJarFromAar.execute();
    zipWithShuttle.execute();
    copyCompleteJarToTestApp.execute();

    if (branchName.startsWith("release")) {
        createJavadoc.execute()
        copyCompleteJarToReleaseDir.execute();
    }
}

/* extract jar from AAR and create rake.jar without shuttle */
task extractJarFromAar(type: Copy) {

    logger "extracting ${tempJar} from ${debugAARPath}"

    from zipTree(file(debugAARPath))
    into aarDir
    rename "classes.jar", tempJar
    exclude "R.txt", "assets", "aidl", "aapt/**/*", "res/**/*", "AndroidManifest.xml",
            "libs/**/*"
    includeEmptyDirs = false
}

/* zip rake-android.jar with shuttle.jar */
task zipWithShuttle(type: Zip) {

    /* constants */
    String shuttleJarNamePrefix = "rakemetricSentinelShuttle"
    def shuttleJarNames = []

    /* logic */
    new File("${includedDir}").eachFile { file ->
        if (file.path.contains(shuttleJarNamePrefix))
            shuttleJarNames << file.path
    }

    if (shuttleJarNames.size > 1)
        throw new IllegalStateException("multiple shuttle jar exists in ${includedDir}")
    else if (shuttleJarNames.size == 0)
        throw new IllegalStateException("can not find shuttle jar in ${includedDir}")

    String shuttleJarName = shuttleJarNames[0]
    logger "provided shuttle: ${shuttleJarName}"

    // merge crash-logger.jar with shuttle.jar
    from zipTree(file("${shuttleJarName}"))
    from zipTree(file("${aarDir}/${tempJar}"))
    exclude ".gitkeep", "META-INF/", "${shuttleJarNamePrefix}.java"
    include "**/*"
    extension "jar"
    destinationDir file("${aarDir}")
}

task copyCompleteJarToTestApp(type: Copy) {

    logger "copy $aarDir/$completeJar to ${testAppLibDir}/"

    from aarDir
    include completeJar
    into testAppLibDir
}

task copyCompleteJarToReleaseDir(type: Copy) {

    logger "copy $aarDir/$completeJar to ${releaseJarDir}/"

    from aarDir
    include completeJar
    into releaseJarDir
}

