buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: net.saliman.gradle.plugin.cobertura.CoberturaPlugin
apply plugin: 'com.github.kt3k.coveralls'

configurations.all {
    resolutionStrategy {
        // Cobertura includes an ASM version that can't handle Java 8, ASM 5.0.3 handles Java8
        force 'org.ow2.asm:asm:5.0.3'
        forcedModules = [ 'org.ow2.asm:asm:5.0.3' ]
    }
}

cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

buildDir = 'build'
version = '0.3.17'
group = 'com.skp.rake'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
    archivesBaseName = 'rake-android'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

configurations {
    provided
}

sourceSets {
    main.compileClasspath += configurations.provided
}

dependencies {
    compile 'org.json:json:20140107'

    provided files('libs/android-api-19.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.httpcomponents:httpclient:4.4.1'
    testCompile 'com.github.tomakehurst:wiremock:1.55'
    testCompile 'ch.qos.logback:logback-core:1.1.3'
    testCompile 'ch.qos.logback:logback-classic:1.1.3'

    testCompile fileTree(dir: 'src/test/libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes("Implementation-Title": "Rake", "Implementation-Version": version)
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: 'http://mvn.skplanet.com/content/repositories/releases')
            snapshotRepository(url: 'http://mvn.skplanet.com/content/repositories/snapshots')
        }
    }
}

// replace version in RakeAPI.java
task updateVersion(type: Copy) {

    String v = version.tokenize('-')[0]

    def pattern = ~/"r0.5.0_c(.)*"/
    def newVersion = "\"r0.5.0_c${v}\""

    def configFile = new File('src/main/java/com/rake/android/rkmetrics/config/RakeConfig.java')

    String content = configFile.getText('UTF-8')
    String oldVersion = content.find(pattern)
    content = content.replaceAll(pattern, newVersion) /* replace version number */

    String replacedVersion = content.find(pattern)

    assert(newVersion == replacedVersion)

    configFile.write(content, 'UTF-8')

    println "[INFO] version $oldVersion in RakeAPI.java was replaced with $newVersion"
}

compileJava.dependsOn updateVersion

build.doLast {

    // copy snapshot jar to ../testApp/app/libs
    copy {
        String buildDir ="${rootProject.projectDir}/build/libs"
        // TODO absolute path
        String testAppLibDir = "../testApp/android-client/app/libs"
        String snapshotJar = "rake-android-${version}.jar"

        from buildDir
        include snapshotJar
        into testAppLibDir
    }
}

